rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Defines whether the user is signed in.
     * @example isSignedIn() == true if request.auth != null
     * @return {bool} True if the user is signed in.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Defines whether the user is the owner of the resource.
     * @param {string} userId - The user ID to check against.
     * @example isOwner('user123') == (request.auth.uid == 'user123')
     * @return {bool} True if the user is the owner.
     */
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    /**
     * @description Defines whether the user is the existing owner of the resource.
     * @param {string} userId - The user ID to check against.
     * @param {string} resourceOwnerId - The resource OwnerId to check against.
     * @example isExistingOwner('user123') == (isOwner('user123') && resource != null)
     * @return {bool} True if the user is the existing owner.
     */
    function isExistingOwner(resourceOwnerId) {
      return request.auth.uid == resourceOwnerId && resource != null;
    }

    /**
     * @description Security rules for the /projects collection.
     * @path /projects/{projectId}
     * @allow (get, list): Any user can read project details.
     * @allow (create, update, delete): Only the owner can modify project details (TODO: requires ownership field in schema).
     * @deny (create, update, delete): Any non-owner attempts to modify project details.
     * @principle Public read, owner-only writes (enforced via TODO until schema is updated).
     */
    match /projects/{projectId} {
      allow get, list: if true;
      allow create: if isSignedIn() && request.resource.data.ownerId == request.auth.uid;
      allow update: if isSignedIn() && request.resource.data.ownerId == request.auth.uid && request.auth.uid == resource.data.ownerId;
      allow delete: if isSignedIn() && resource.data.ownerId == request.auth.uid;
    }

    /**
     * @description Security rules for the /skills collection.
     * @path /skills/{skillId}
     * @allow (get, list): Any user can read skill information.
     * @allow (create, update, delete): Only the owner can modify skill information (TODO: requires ownership field in schema).
     * @deny (create, update, delete): Any non-owner attempts to modify skill information.
     * @principle Public read, owner-only writes (enforced via TODO until schema is updated).
     */
    match /skills/{skillId} {
      allow get, list: if true;
      allow create: if isSignedIn() && request.resource.data.ownerId == request.auth.uid;
      allow update: if isSignedIn() && resource.data.ownerId == request.auth.uid && request.auth.uid == resource.data.ownerId;
      allow delete: if isSignedIn() && resource.data.ownerId == request.auth.uid;
    }

    /**
     * @description Security rules for the /contactInfo collection.
     * @path /contactInfo/{contactInfoId}
     * @allow (get, list): Any user can read contact information.
     * @allow (create, update, delete): Only the owner can modify contact information (TODO: requires ownership field in schema).
     * @deny (create, update, delete): Any non-owner attempts to modify contact information.
     * @principle Public read, owner-only writes (enforced via TODO until schema is updated).
     */
    match /contactInfo/{contactInfoId} {
      allow get, list: if true;
      allow create: if isSignedIn() && request.resource.data.ownerId == request.auth.uid;
      allow update: if isSignedIn() && resource.data.ownerId == request.auth.uid && request.auth.uid == resource.data.ownerId;
      allow delete: if isSignedIn() && resource.data.ownerId == request.auth.uid;
    }

    /**
     * @description Security rules for the /aboutMe collection.
     * @path /aboutMe/{aboutMeId}
     * @allow (get, list): Any user can read 'About Me' content.
     * @allow (create, update, delete): Only the owner can modify 'About Me' content (TODO: requires ownership field in schema).
     * @deny (create, update, delete): Any non-owner attempts to modify 'About Me' content.
     * @principle Public read, owner-only writes (enforced via TODO until schema is updated).
     */
    match /aboutMe/{aboutMeId} {
      allow get, list: if true;
      allow create: if isSignedIn() && request.resource.data.ownerId == request.auth.uid;
      allow update: if isSignedIn() && resource.data.ownerId == request.auth.uid && request.auth.uid == resource.data.ownerId;
      allow delete: if isSignedIn() && resource.data.ownerId == request.auth.uid;
    }

    /**
     * @description Security rules for the /messages collection.
     * @path /messages/{messageId}
     * @allow (create): Any authenticated or anonymous user can submit a message.
     * @allow (get, list): Only an admin can read messages (TODO: requires admin role implementation).
     * @deny (update, delete): No user can update or delete messages.
     * @principle Public write, admin-only read (enforced via TODO until admin roles are implemented).
     */
    match /messages/{messageId} {
      allow create: if true;
      allow get, list: if false; // TODO: Implement admin role check for reading messages.
      allow update, delete: if false;
    }
  }
}