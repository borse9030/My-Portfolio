/**
 * @file Firestore Security Rules
 * @description This ruleset defines access control for Bhavesh's portfolio data.
 *
 * Core Philosophy:
 * The security model prioritizes ease of use during prototyping.  Read access is generally open to facilitate development.
 * Write access is restricted to prevent unauthorized data modification.  Specific rules are implemented for different collections
 * based on their intended use.
 *
 * Data Structure:
 * - /projects/{projectId}: Stores individual project details.
 * - /skills/{skillId}: Stores individual skill information.
 * - /contactInfo/{contactInfoId}: Stores Bhavesh's contact information.
 * - /aboutMe/{aboutMeId}: Stores the content for the 'About Me' section.
 * - /messages/{messageId}: Stores contact form messages. Write access is granted to all authenticated users.
 *
 * Key Security Decisions:
 * - Public read access for all collections except messages.
 * - Authenticated write access for messages.
 * - No user listing is explicitly denied.
 *
 * Denormalization for Authorization:
 * - Not used in this version.
 *
 * Structural Segregation:
 * - Not used in this version.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Grants public read access and restricts write access to the 'projects' collection.
     * @path /projects/{projectId}
     * @allow (get, list) Allows any user to read project details.
     * @deny (create, update, delete) Denies any user from creating, updating, or deleting project details.
     * @principle Public read, restricted write.
     */
    match /projects/{projectId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Grants public read access and restricts write access to the 'skills' collection.
     * @path /skills/{skillId}
     * @allow (get, list) Allows any user to read skill information.
     * @deny (create, update, delete) Denies any user from creating, updating, or deleting skill information.
     * @principle Public read, restricted write.
     */
    match /skills/{skillId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Grants public read access and restricts write access to the 'contactInfo' collection.
     * @path /contactInfo/{contactInfoId}
     * @allow (get, list) Allows any user to read contact information.
     * @deny (create, update, delete) Denies any user from creating, updating, or deleting contact information.
     * @principle Public read, restricted write.
     */
    match /contactInfo/{contactInfoId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Grants public read access and restricts write access to the 'aboutMe' collection.
     * @path /aboutMe/{aboutMeId}
     * @allow (get, list) Allows any user to read 'About Me' section content.
     * @deny (create, update, delete) Denies any user from creating, updating, or deleting 'About Me' section content.
     * @principle Public read, restricted write.
     */
    match /aboutMe/{aboutMeId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Grants authenticated write access to the 'messages' collection, effectively allowing any signed in user to write messages.
     * @path /messages/{messageId}
     * @allow (create, update, delete) Allows only authenticated users to create, update, and delete messages.
     * @allow (list, get) Allows only authenticated users to read messages.
     * @deny (create, update, delete) Denies unauthenticated users from creating, updating, or deleting messages.
     * @principle Authenticated write access.
     */
    match /messages/{messageId} {
      allow list, get: if request.auth != null;
      allow create, update, delete: if request.auth != null;
    }

    // Generic fallback rule - all other paths are read-only
    match /{document=**} {
       allow read: if true;
       allow write: if false;
    }
  }
}