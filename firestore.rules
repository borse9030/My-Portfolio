/**
 * @file Overview
 * This ruleset secures Bhavesh's portfolio data on Firestore.
 *
 * Core Philosophy:
 *  - Data is generally readable by anyone, but write access is strictly controlled.
 *  - The primary aim is to prevent unauthorized modifications while allowing public access for display.
 *  - No user-specific data exists. Thus, there is no user-ownership model.
 *
 * Data Structure:
 *  - Data is stored in top-level collections: `/projects/{projectId}`, `/skills/{skillId}`, `/contactInfo/{contactInfoId}`, `/aboutMe/{aboutMeId}`, and `/messages/{messageId}`.
 *
 * Key Security Decisions:
 *  - Listing is allowed for all collections, as the data is meant to be publicly viewable on Bhavesh's portfolio.
 *  - Write access to `projects`, `skills`, `contactInfo`, and `aboutMe` should ideally be restricted to Bhavesh only, but this is not yet implemented, so writes are denied.
 *  - Write access to `messages` is currently open to all, but this will be restricted to authenticated users or anonymous users in the future.
 *
 * Denormalization for Authorization:
 *  - No denormalization is necessary at this stage, but if user-specific settings or preferences were added in the future, they would be stored under `/users/{userId}` with an `id` field matching the `userId`.
 *
 * Structural Segregation:
 *  - Not applicable, as all data is intended to be public or admin-controlled.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Manages project data for the portfolio.
     * @path /projects/{projectId}
     * @allow get, list: Anyone can read project data.
     * @allow create, update, delete: No one can write project data.
     * @deny create, update, delete: Unauthenticated user attempts to create a project.
     * @principle Allows public read access but restricts write access.
     */
    match /projects/{projectId} {
      allow get, list: if true;
      allow create, update, delete: if false; // TODO: Implement admin-only write access
    }

    /**
     * @description Manages skill data for the portfolio.
     * @path /skills/{skillId}
     * @allow get, list: Anyone can read skill data.
     * @allow create, update, delete: No one can write skill data.
     * @deny create, update, delete: Unauthenticated user attempts to create a skill.
     * @principle Allows public read access but restricts write access.
     */
    match /skills/{skillId} {
      allow get, list: if true;
      allow create, update, delete: if false; // TODO: Implement admin-only write access
    }

    /**
     * @description Manages contact information for the portfolio.
     * @path /contactInfo/{contactInfoId}
     * @allow get, list: Anyone can read contact information.
     * @allow create, update, delete: No one can write contact information.
     * @deny create, update, delete: Unauthenticated user attempts to create contact information.
     * @principle Allows public read access but restricts write access.
     */
    match /contactInfo/{contactInfoId} {
      allow get, list: if true;
      allow create, update, delete: if false; // TODO: Implement admin-only write access
    }

    /**
     * @description Manages the 'About Me' section content.
     * @path /aboutMe/{aboutMeId}
     * @allow get, list: Anyone can read the 'About Me' section.
     * @allow create, update, delete: No one can write the 'About Me' section.
     * @deny create, update, delete: Unauthenticated user attempts to modify the 'About Me' section.
     * @principle Allows public read access but restricts write access.
     */
    match /aboutMe/{aboutMeId} {
      allow get, list: if true;
      allow create, update, delete: if false; // TODO: Implement admin-only write access
    }

    /**
     * @description Manages messages submitted through the contact form.
     * @path /messages/{messageId}
     * @allow get, list: Anyone can read the messages data.
     * @allow create, update, delete: No one can write the messages data.
     * @deny create, update, delete: Unauthenticated user attempts to write messages data.
     * @principle Allows public read access and restricts write access to authenticated or anonymous user.
     */
    match /messages/{messageId} {
      allow get, list: if false;  // TODO: Restrict to Bhavesh (admin) only
      allow create: if true; //TODO: restrict write access to authenticated or anonymous user
      allow update, delete: if false; // TODO: Implement admin-only write access
    }
  }
}