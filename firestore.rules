/**
 * @fileoverview Firestore Security Rules for Bhavesh's portfolio application.
 *
 * Core Philosophy:
 * This ruleset provides public read access to portfolio content (projects, skills, about me, contact info)
 * while restricting write access to the website owner.  Contact form submissions ("messages")
 * are publicly writeable (create only) but not readable except by the owner (future admin).
 *
 * Data Structure:
 * - /projects/{projectId}: Stores individual project details.
 * - /skills/{skillId}: Stores individual skill details.
 * - /contactInfo/{contactInfoId}: Stores contact information.
 * - /aboutMe/{aboutMeId}: Stores "About Me" section content.
 * - /messages/{messageId}: Stores contact form submissions.
 *
 * Key Security Decisions:
 * - Public read access is granted to projects, skills, contact info, and about me sections.
 * - Only authenticated users can submit contact form messages.
 * - Listing messages is denied to all users, based on the provided error report and the
 *   reasoning in `backend.json`.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Grants public read access to projects and restricts write access.
     * @path /projects/{projectId}
     * @allow get, list: if true;
     * @allow create: if false;
     * @allow update: if false;
     * @allow delete: if false;
     * @principle Public read, owner-only writes (not yet implemented, requires owner ID field).
     */
    match /projects/{projectId} {
      allow get, list: if true;
      allow create: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
      allow update: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
      allow delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
    }

    /**
     * @description Grants public read access to skills and restricts write access.
     * @path /skills/{skillId}
     * @allow get, list: if true;
     * @allow create: if false;
     * @allow update: if false;
     * @allow delete: if false;
     * @principle Public read, owner-only writes (not yet implemented, requires owner ID field).
     */
    match /skills/{skillId} {
      allow get, list: if true;
      allow create: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
      allow update: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
      allow delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
    }

    /**
     * @description Grants public read access to contact info and restricts write access.
     * @path /contactInfo/{contactInfoId}
     * @allow get, list: if true;
     * @allow create: if false;
     * @allow update: if false;
     * @allow delete: if false;
     * @principle Public read, owner-only writes (not yet implemented, requires owner ID field).
     */
    match /contactInfo/{contactInfoId} {
      allow get, list: if true;
      allow create: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
      allow update: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
      allow delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
    }

    /**
     * @description Grants public read access to about me section and restricts write access.
     * @path /aboutMe/{aboutMeId}
     * @allow get, list: if true;
     * @allow create: if false;
     * @allow update: if false;
     * @allow delete: if false;
     * @principle Public read, owner-only writes (not yet implemented, requires owner ID field).
     */
    match /aboutMe/{aboutMeId} {
      allow get, list: if true;
      allow create: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
      allow update: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
      allow delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
    }

    /**
     * @description Allows any authenticated user to create a message, but restricts reading.
     * @path /messages/{messageId}
     * @allow get: if false;
     * @allow list: if false;
     * @allow create: if isSignedIn();
     * @allow update: if false;
     * @allow delete: if false;
     * @principle Public write (create only), no read access (except future admin).
     */
    match /messages/{messageId} {
      allow get: if false;
      allow list: if false;
      allow create: if isSignedIn();
      allow update: if false;
      allow delete: if false;
    }
  }

  // Helper function to determine if a user is signed in.
  function isSignedIn() {
    return request.auth != null;
  }
}