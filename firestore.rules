/**
 * @fileoverview Firestore Security Rules for Bhavesh's portfolio application.
 *
 * Core Philosophy:
 * This ruleset enforces a public-read, owner-write model for most data, with specific
 * handling for contact form messages. Only authenticated users, including anonymous users can submit contact form messages.
 *
 * Data Structure:
 * - /projects/{projectId}: Stores project details. Publicly readable, owner-writable.
 * - /skills/{skillId}: Stores skill information. Publicly readable, owner-writable.
 * - /contactInfo/{contactInfoId}: Stores contact information. Publicly readable, owner-writable.
 * - /aboutMe/{aboutMeId}: Stores 'About Me' content. Publicly readable, owner-writable.
 * - /messages/{messageId}: Stores contact form messages. Publicly writable (all authenticated users), not publicly listable, gettable only by admin (not yet implemented).
 *
 * Key Security Decisions:
 * - All collections are publicly readable via `get` and `list`, except `messages`.
 * - Only authenticated users can submit messages.
 * - Write access to all collections, except `messages`, will eventually be restricted to Bhavesh.
 * - Listing of messages is denied to all authenticated users.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows read access to projects for everyone, and write access will eventually be restricted to the owner.
     * @path /projects/{projectId}
     * @allow get, list: if true;
     * @allow create: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
     * @allow update: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
     * @allow delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
     * @principle Public read, owner-only writes.
     */
    match /projects/{projectId} {
      allow get, list: if true;
      allow create: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
      allow update: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
      allow delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
    }

    /**
     * @description Allows read access to skills for everyone, and write access will eventually be restricted to the owner.
     * @path /skills/{skillId}
     * @allow get, list: if true;
     * @allow create: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
     * @allow update: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
     * @allow delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
     * @principle Public read, owner-only writes.
     */
    match /skills/{skillId} {
      allow get, list: if true;
      allow create: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
      allow update: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
      allow delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
    }

    /**
     * @description Allows read access to contact info for everyone, and write access will eventually be restricted to the owner.
     * @path /contactInfo/{contactInfoId}
     * @allow get, list: if true;
     * @allow create: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
     * @allow update: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
     * @allow delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
     * @principle Public read, owner-only writes.
     */
    match /contactInfo/{contactInfoId} {
      allow get, list: if true;
      allow create: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
      allow update: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
      allow delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
    }

    /**
     * @description Allows read access to about me info for everyone, and write access will eventually be restricted to the owner.
     * @path /aboutMe/{aboutMeId}
     * @allow get, list: if true;
     * @allow create: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
     * @allow update: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
     * @allow delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
     * @principle Public read, owner-only writes.
     */
    match /aboutMe/{aboutMeId} {
      allow get, list: if true;
      allow create: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
      allow update: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
      allow delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
    }

    /**
     * @description Allows all authenticated users to create messages, but only admin to read messages.
     * @path /messages/{messageId}
     * @allow create: if isSignedIn();
     * @allow get: if false; // TODO: Implement admin role check.
     * @allow list: if false;
     * @allow update: if false;
     * @allow delete: if false;
     * @principle Authenticated users can submit messages, only admin can view.
     */
    match /messages/{messageId} {
      allow create: if isSignedIn();
      allow get: if false; // TODO: Implement admin role check.
      allow list: if false;
      allow update: if false;
      allow delete: if false;
    }
  }

  function isSignedIn() {
    return request.auth != null;
  }
}