/**
 * @file Firebase Security Rules for Bhavesh's Portfolio
 * @core_philosophy This ruleset prioritizes public read access for portfolio content (projects, skills, aboutMe, contactInfo)
 *   while restricting write access to authenticated users (Bhavesh in this case). Message submissions are publicly writeable by authenticated users.
 * @data_structure The data is organized into top-level collections: /projects, /skills, /contactInfo, /aboutMe, and /messages.
 *   Each collection contains documents representing individual entities.
 * @key_security_decisions Public read access is granted to all portfolio content.
 *   Write access to portfolio content is restricted to authenticated users only.
 *   Write access to messages is granted to all authenticated users. Listing messages is disallowed for non-admin users.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows anyone to read project data, but only authenticated users can create, update, or delete projects.
     * @path /projects/{projectId}
     * @allow (get, list) - Any user can read project data.
     * @allow (create, update, delete) - Authenticated user can modify.
     * @deny (create, update, delete) - Unauthenticated user cannot modify.
     * @principle Public read, authenticated-user-only writes.
     */
    match /projects/{projectId} {
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn() && resource != null;
      allow delete: if isSignedIn() && resource != null;
    }

    /**
     * @description Allows anyone to read skill data, but only authenticated users can create, update, or delete skills.
     * @path /skills/{skillId}
     * @allow (get, list) - Any user can read skill data.
     * @allow (create, update, delete) - Authenticated user can modify.
     * @deny (create, update, delete) - Unauthenticated user cannot modify.
     * @principle Public read, authenticated-user-only writes.
     */
    match /skills/{skillId} {
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn() && resource != null;
      allow delete: if isSignedIn() && resource != null;
    }

    /**
     * @description Allows anyone to read contact info, but only authenticated users can create, update, or delete contact info.
     * @path /contactInfo/{contactInfoId}
     * @allow (get, list) - Any user can read contact info.
     * @allow (create, update, delete) - Authenticated user can modify.
     * @deny (create, update, delete) - Unauthenticated user cannot modify.
     * @principle Public read, authenticated-user-only writes.
     */
    match /contactInfo/{contactInfoId} {
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn() && resource != null;
      allow delete: if isSignedIn() && resource != null;
    }

    /**
     * @description Allows anyone to read "about me" data, but only authenticated users can create, update, or delete "about me" data.
     * @path /aboutMe/{aboutMeId}
     * @allow (get, list) - Any user can read "about me" data.
     * @allow (create, update, delete) - Authenticated user can modify.
     * @deny (create, update, delete) - Unauthenticated user cannot modify.
     * @principle Public read, authenticated-user-only writes.
     */
    match /aboutMe/{aboutMeId} {
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn() && resource != null;
      allow delete: if isSignedIn() && resource != null;
    }

    /**
     * @description Allows anyone to create messages (contact form submissions), but listing messages is denied.  Getting a specific message requires authentication.
     * @path /messages/{messageId}
     * @allow (create) - Any signed in user can create messages.
     * @allow (get) - Any signed in user can get messages.
     * @deny (list) - Listing of messages is not allowed.
     * @deny (update, delete) - Updating or deleting messages is not allowed.
     * @principle Public writes for message submissions, restricted reads.
     */
    match /messages/{messageId} {
      allow get: if isSignedIn();
      allow list: if false;
      allow create: if isSignedIn();
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Checks if the user is signed in
     */
    function isSignedIn() {
      return request.auth != null;
    }
  }
}