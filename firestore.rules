/**
 * @fileoverview Firestore Security Rules for Bhavesh's portfolio application.
 *
 * Core Philosophy:
 * This ruleset prioritizes secure access to portfolio data.  Write access to portfolio content
 * (projects, skills, aboutMe, contactInfo) is implicitly restricted and should be managed
 * via the Firebase console, not the client application. Read access to these collections is public.
 * Message submission from the contact form is enabled for all users, but reading messages is denied
 * to all users for now.
 *
 * Data Structure:
 * - /projects/{projectId}: Stores individual project documents.
 * - /skills/{skillId}: Stores individual skill documents.
 * - /contactInfo/{contactInfoId}: Stores contact information.
 * - /aboutMe/{aboutMeId}: Stores 'About Me' section content.
 * - /messages/{messageId}: Stores contact form messages.
 *
 * Key Security Decisions:
 * - Public read access for projects, skills, aboutMe and contactInfo to allow the portfolio to be viewed by anyone.
 * - All write operations are disabled for projects, skills, aboutMe and contactInfo. This enforces that the data can
 *   only be modified through the Firebase console (or backend functions with appropriate admin privileges in the future).
 * - Messages collection allows create from any authenticated or unauthenticated user, but no reads are currently allowed.
 * - No user listing is permitted.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Grants public read access to projects and denies all writes.
     * @path /projects/{projectId}
     * @allow get, list: true
     * @deny create, update, delete: false
     * @principle Allows public access to project data while preventing unauthorized modifications.
     */
    match /projects/{projectId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Grants public read access to skills and denies all writes.
     * @path /skills/{skillId}
     * @allow get, list: true
     * @deny create, update, delete: false
     * @principle Allows public access to skill data while preventing unauthorized modifications.
     */
    match /skills/{skillId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Grants public read access to contact info and denies all writes.
     * @path /contactInfo/{contactInfoId}
     * @allow get, list: if true;
     * @deny create, update, delete: false
     * @principle Allows public access to contact info while preventing unauthorized modifications.
     */
    match /contactInfo/{contactInfoId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Grants public read access to about me section and denies all writes.
     * @path /aboutMe/{aboutMeId}
     * @allow get, list: if true
     * @deny create, update, delete: false
     * @principle Allows public access to about me data while preventing unauthorized modifications.
     */
    match /aboutMe/{aboutMeId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows any authenticated user to create messages, but denies reading or updating.
     * @path /messages/{messageId}
     * @allow create: if true;
     * @deny get, list, update, delete: false;
     * @principle Allows message submissions while restricting access to message content.
     */
    match /messages/{messageId} {
      allow create: if true;
      allow get, list, update, delete: if false;
    }
  }
}