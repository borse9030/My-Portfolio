/**
 * @fileoverview Firestore Security Rules for Bhavesh's portfolio application.
 *
 * Core Philosophy:
 * This ruleset provides public read access to portfolio data (projects, skills, contact info, about me)
 * while restricting write access to authorized users. The 'messages' collection allows public write access for contact form submissions.
 *
 * Data Structure:
 * - /projects/{projectId}: Stores individual project details.
 * - /skills/{skillId}: Stores individual skill details.
 * - /contactInfo/{contactInfoId}: Stores contact information.
 * - /aboutMe/{aboutMeId}: Stores the 'About Me' section content.
 * - /messages/{messageId}: Stores contact form submissions.
 *
 * Key Security Decisions:
 * - Public read access is granted for the 'projects', 'skills', 'contactInfo', and 'aboutMe' collections to allow anyone to view the portfolio.
 * - Write access to 'projects', 'skills', 'contactInfo', and 'aboutMe' collections is denied for all users, simulating an admin-only environment.
 * - Public write access is granted to the 'messages' collection, enabling anyone to submit a contact form.
 * - No user listing is allowed.
 *
 * Denormalization for Authorization:
 *  - Not applicable in this scenario as authorization is based on denying all writes and allowing all reads for specific collections.
 *
 * Structural Segregation:
 *  - Not applicable in this scenario.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Grants public read access to projects and denies all write access.
     * @path /projects/{projectId}
     * @allow (get, list): Any user can read project details.
     * @deny (create, update, delete): No user can create, update, or delete projects.
     * @principle Allows public reads, restricts writes to simulate admin-only access.
     */
    match /projects/{projectId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Grants public read access to skills and denies all write access.
     * @path /skills/{skillId}
     * @allow (get, list): Any user can read skill details.
     * @deny (create, update, delete): No user can create, update, or delete skills.
     * @principle Allows public reads, restricts writes to simulate admin-only access.
     */
    match /skills/{skillId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Grants public read access to contact info and denies all write access.
     * @path /contactInfo/{contactInfoId}
     * @allow (get, list): Any user can read contact information.
     * @deny (create, update, delete): No user can create, update, or delete contact information.
     * @principle Allows public reads, restricts writes to simulate admin-only access.
     */
    match /contactInfo/{contactInfoId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Grants public read access to the 'About Me' section and denies all write access.
     * @path /aboutMe/{aboutMeId}
     * @allow (get, list): Any user can read the 'About Me' content.
     * @deny (create, update, delete): No user can create, update, or delete the 'About Me' content.
     * @principle Allows public reads, restricts writes to simulate admin-only access.
     */
    match /aboutMe/{aboutMeId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows anyone to create messages and denies read, update, and delete access.
     * @path /messages/{messageId}
     * @allow create: Any user can create a message.
     * @deny get, list, update, delete: No user can read, update, or delete messages.
     * @principle Allows public message submissions, restricts access to the submissions.
     */
    match /messages/{messageId} {
      allow create: if true;
      allow get, list, update, delete: if false;
    }
  }
}