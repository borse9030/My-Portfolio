/**
 * @fileoverview Firestore Security Rules for Bhavesh's portfolio application.
 *
 * Core Philosophy:
 * This ruleset provides public read access to portfolio data (projects, skills, contact info, about me)
 * while restricting write access to the website owner. Contact form messages can be created by anyone
 * but are only readable by the owner.  No user-specific data is stored, so ownership is not a factor
 * except for write operations on the core portfolio data.
 *
 * Data Structure:
 * - /projects/{projectId}: Stores project details.
 * - /skills/{skillId}: Stores skill information.
 * - /contactInfo/{contactInfoId}: Stores contact information.
 * - /aboutMe/{aboutMeId}: Stores the 'About Me' section content.
 * - /messages/{messageId}: Stores messages submitted through the contact form.
 *
 * Key Security Decisions:
 * - Public read access for all portfolio data (projects, skills, contact info, about me).
 * - Only the owner (defined externally as an admin) can create, update, or delete portfolio data.
 * - Anyone can submit contact form messages (create), but only the owner can read them (get, list).
 * - No user listing is allowed.
 *
 * Denormalization for Authorization:
 *  - There's no explicit owner ID on the documents themselves. Authorization relies on an external
 *    mechanism (e.g., a check in the backend functions) to determine if the user is an admin/owner.
 *
 * Structural Segregation:
 *  - Public portfolio data and private contact form messages are stored in separate collections to
 *    simplify access control.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Grants public read access to projects and restricts write access.
     * @path /projects/{projectId}
     * @allow get, list: if true;
     * @allow create, update, delete: if false; // TODO: Add owner validation once admin roles are implemented.
     * @deny create: if true;
     * @deny update: if true;
     * @deny delete: if true;
     * @principle Public read, owner-only writes.
     */
    match /projects/{projectId} {
      allow get, list: if true;
      allow create, update, delete: if false; // TODO: Add owner validation once admin roles are implemented.
    }

    /**
     * @description Grants public read access to skills and restricts write access.
     * @path /skills/{skillId}
     * @allow get, list: if true;
     * @allow create, update, delete: if false; // TODO: Add owner validation once admin roles are implemented.
     * @deny create: if true;
     * @deny update: if true;
     * @deny delete: if true;
     * @principle Public read, owner-only writes.
     */
    match /skills/{skillId} {
      allow get, list: if true;
      allow create, update, delete: if false; // TODO: Add owner validation once admin roles are implemented.
    }

    /**
     * @description Grants public read access to contact info and restricts write access.
     * @path /contactInfo/{contactInfoId}
     * @allow get, list: if true;
     * @allow create, update, delete: if false; // TODO: Add owner validation once admin roles are implemented.
     * @deny create: if true;
     * @deny update: if true;
     * @deny delete: if true;
     * @principle Public read, owner-only writes.
     */
    match /contactInfo/{contactInfoId} {
      allow get, list: if true;
      allow create, update, delete: if false; // TODO: Add owner validation once admin roles are implemented.
    }

    /**
     * @description Grants public read access to about me and restricts write access.
     * @path /aboutMe/{aboutMeId}
     * @allow get, list: if true;
     * @allow create, update, delete: if false; // TODO: Add owner validation once admin roles are implemented.
     * @deny create: if true;
     * @deny update: if true;
     * @deny delete: if true;
     * @principle Public read, owner-only writes.
     */
    match /aboutMe/{aboutMeId} {
      allow get, list: if true;
      allow create, update, delete: if false; // TODO: Add owner validation once admin roles are implemented.
    }

    /**
     * @description Allows anyone to create messages, but only the owner can read them.
     * @path /messages/{messageId}
     * @allow create: if isSignedIn();
     * @allow get, list: if false; // TODO: Add owner validation once admin roles are implemented.
     * @deny update: if true;
     * @deny delete: if true;
     * @principle Public creation, owner-only reads.
     */
    match /messages/{messageId} {
      allow create: if isSignedIn();
      allow get, list: if false; // TODO: Add owner validation once admin roles are implemented.
      allow update: if false;
      allow delete: if false;
    }
  }

  function isSignedIn() {
    return request.auth != null;
  }
}