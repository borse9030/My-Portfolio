/**
 * @fileoverview Firestore Security Rules for Bhavesh's portfolio application.
 *
 * Core Philosophy:
 * This ruleset provides public read access to portfolio data (projects, skills, contact info, about me)
 * while restricting write access to the website owner. Messages submitted via the contact form are
 * publicly writable (create only), but not readable by regular users.
 *
 * Data Structure:
 * - /projects/{projectId}: Stores individual project details.
 * - /skills/{skillId}: Stores individual skill details.
 * - /contactInfo/{contactInfoId}: Stores contact information.
 * - /aboutMe/{aboutMeId}: Stores the "About Me" section content.
 * - /messages/{messageId}: Stores messages submitted via the contact form.
 *
 * Key Security Decisions:
 * - Public read access to projects, skills, contactInfo, and aboutMe collections.
 * - Messages are publicly creatable, but not readable (admin access only via backend).
 * - No user listing is allowed.
 * - Owner-only write access is not enforced because no ownership field is present in the schema.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Grants public read access to projects and restricts write access.
     * @path /projects/{projectId}
     * @allow get, list: Anyone can read project data.
     * @allow create: if false;
     * @allow update: if false;
     * @allow delete: if false;
     * @deny create: if true; - Only an authenticated user can create a project.
     * @deny update: if true; - Only an authenticated user can update a project.
     * @deny delete: if true; - Only an authenticated user can delete a project.
     * @principle Allows public reads, restricts writes.
     */
    match /projects/{projectId} {
      allow get, list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Grants public read access to skills and restricts write access.
     * @path /skills/{skillId}
     * @allow get, list: Anyone can read skill data.
     * @allow create: if false;
     * @allow update: if false;
     * @allow delete: if false;
     * @deny create: if true; - Only an authenticated user can create a skill.
     * @deny update: if true; - Only an authenticated user can update a skill.
     * @deny delete: if true; - Only an authenticated user can delete a skill.
     * @principle Allows public reads, restricts writes.
     */
    match /skills/{skillId} {
      allow get, list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Grants public read access to contact info and restricts write access.
     * @path /contactInfo/{contactInfoId}
     * @allow get, list: Anyone can read contact info.
     * @allow create: if false;
     * @allow update: if false;
     * @allow delete: if false;
     * @deny create: if true; - Only an authenticated user can create contact info.
     * @deny update: if true; - Only an authenticated user can update contact info.
     * @deny delete: if true; - Only an authenticated user can delete contact info.
     * @principle Allows public reads, restricts writes.
     */
    match /contactInfo/{contactInfoId} {
      allow get, list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Grants public read access to about me and restricts write access.
     * @path /aboutMe/{aboutMeId}
     * @allow get, list: Anyone can read about me data.
     * @allow create: if false;
     * @allow update: if false;
     * @allow delete: if false;
     * @deny create: if true; - Only an authenticated user can create about me data.
     * @deny update: if true; - Only an authenticated user can update about me data.
     * @deny delete: if true; - Only an authenticated user can delete about me data.
     * @principle Allows public reads, restricts writes.
     */
    match /aboutMe/{aboutMeId} {
      allow get, list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Allows anyone to create a message but restricts reading, updating, and deleting messages.
     * @path /messages/{messageId}
     * @allow create: Anyone can create a message.
     * @allow get, list: if false;
     * @allow update: if false;
     * @allow delete: if false;
     * @deny get: if true; - No one can read a message through the client.
     * @deny list: if true; - No one can list messages.
     * @deny update: if true; - No one can update a message.
     * @deny delete: if true; - No one can delete a message.
     * @principle Allows public message creation, restricts all other access.
     */
    match /messages/{messageId} {
      allow create: if true;
      allow get, list: if false;
      allow update: if false;
      allow delete: if false;
    }
  }
}