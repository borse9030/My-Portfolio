/**
 * @fileoverview Firestore Security Rules for Bhavesh's portfolio application.
 *
 * Core Philosophy:
 * This ruleset provides public read access to portfolio data (projects, skills, contact info, about me)
 * while restricting write access to the website owner. Contact form messages can be created by anyone
 * but are only readable by the application owner.
 *
 * Data Structure:
 * - /projects/{projectId}: Stores individual project details.
 * - /skills/{skillId}: Stores individual skill details.
 * - /contactInfo/{contactInfoId}: Stores contact information.
 * - /aboutMe/{aboutMeId}: Stores the 'About Me' content.
 * - /messages/{messageId}: Stores contact form messages.
 *
 * Key Security Decisions:
 * - Public read access is granted to projects, skills, contact info, and about me sections.
 * - Only authenticated users can create messages.
 * - Listing messages is disallowed for all users except the application owner (future admin role).
 * - The specific data shapes are NOT enforced to allow for rapid prototyping.
 *
 * Denormalization for Authorization:
 * - This ruleset does not currently implement denormalization. If more complex authorization is needed (e.g., project-specific roles),
 *   consider adding a `members` map to the relevant documents.
 *
 * Structural Segregation:
 * - All data is stored in top-level collections.  There are no user-specific subcollections in this design.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows anyone to read project details, but restricts creation, updates, and deletion.
     * @path /projects/{projectId}
     * @allow get, list: if true;
     * @allow create: if false;
     * @allow update: if false;
     * @allow delete: if false;
     * @deny create: if true; // Prevents anyone from creating projects.
     * @deny update: if true; // Prevents anyone from updating projects.
     * @deny delete: if true; // Prevents anyone from deleting projects.
     * @principle Public read access, owner-only write access (not yet implemented).
     */
    match /projects/{projectId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows anyone to read skill details, but restricts creation, updates, and deletion.
     * @path /skills/{skillId}
     * @allow get, list: if true;
     * @allow create: if false;
     * @allow update: if false;
     * @allow delete: if false;
     * @deny create: if true; // Prevents anyone from creating skills.
     * @deny update: if true; // Prevents anyone from updating skills.
     * @deny delete: if true; // Prevents anyone from deleting skills.
     * @principle Public read access, owner-only write access (not yet implemented).
     */
    match /skills/{skillId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows anyone to read contact information, but restricts creation, updates, and deletion.
     * @path /contactInfo/{contactInfoId}
     * @allow get, list: if true;
     * @allow create: if false;
     * @allow update: if false;
     * @allow delete: if false;
     * @deny create: if true; // Prevents anyone from creating contact info.
     * @deny update: if true; // Prevents anyone from updating contact info.
     * @deny delete: if true; // Prevents anyone from deleting contact info.
     * @principle Public read access, owner-only write access (not yet implemented).
     */
    match /contactInfo/{contactInfoId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows anyone to read "About Me" information, but restricts creation, updates, and deletion.
     * @path /aboutMe/{aboutMeId}
     * @allow get, list: if true;
     * @allow create: if false;
     * @allow update: if false;
     * @allow delete: if false;
     * @deny create: if true; // Prevents anyone from creating about me.
     * @deny update: if true; // Prevents anyone from updating about me.
     * @deny delete: if true; // Prevents anyone from deleting about me.
     * @principle Public read access, owner-only write access (not yet implemented).
     */
    match /aboutMe/{aboutMeId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows any authenticated user to create messages, but only allows the application owner (future admin) to read them.
     * @path /messages/{messageId}
     * @allow get: if false; // Only admin can read
     * @allow list: if false; // No one can list
     * @allow create: if isSignedIn();
     * @allow update: if false;
     * @allow delete: if false;
     * @allow read: if false;
     * @deny update: if true;
     * @deny delete: if true;
     * @principle Public write, private read.
     */
    match /messages/{messageId} {
      allow create: if isSignedIn();
      allow get, list, update, delete: if false;
    }
  }

  // Helper function to determine if a user is signed in.
  function isSignedIn() {
    return request.auth != null;
  }

  // Helper function to determine if the request is from the owner.
  function isOwner(userId) {
    return request.auth.uid == userId;
  }
}