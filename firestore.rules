/**
 * @file Firebase Security Rules for Bhavesh's Portfolio
 *
 * @core_philosophy This ruleset enforces a public read policy for most data, with owner-only writes.
 *  The /messages collection allows any authenticated user to create messages, but listing messages is restricted to the owner.
 * @data_structure The data is organized into top-level collections: /projects, /skills, /contactInfo, /aboutMe, and /messages.
 * @key_security_decisions
 *  - User listing is disallowed for all collections.
 *  - The /messages collection is writeable by any authenticated user.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows public read access to project data, but restricts write access to the owner.
     * @path /projects/{projectId}
     * @allow (get, list): Any user can read project data.
     * @allow (create, update, delete): No one can modify.
     * @deny (create, update, delete): Attempts by any user to modify projects will be rejected.
     * @principle Allows public reads, restricts writes.
     */
    match /projects/{projectId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows public read access to skill data, but restricts write access to the owner.
     * @path /skills/{skillId}
     * @allow (get, list): Any user can read skill data.
     * @allow (create, update, delete): No one can modify.
     * @deny (create, update, delete): Attempts by any user to modify skills will be rejected.
     * @principle Allows public reads, restricts writes.
     */
    match /skills/{skillId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows public read access to contact info, but restricts write access to the owner.
     * @path /contactInfo/{contactInfoId}
     * @allow (get, list): Any user can read contact info.
     * @allow (create, update, delete): No one can modify.
     * @deny (create, update, delete): Attempts by any user to modify contact info will be rejected.
     * @principle Allows public reads, restricts writes.
     */
    match /contactInfo/{contactInfoId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows public read access to about me data, but restricts write access to the owner.
     * @path /aboutMe/{aboutMeId}
     * @allow (get, list): Any user can read about me data.
     * @allow (create, update, delete): No one can modify.
     * @deny (create, update, delete): Attempts by any user to modify about me will be rejected.
     * @principle Allows public reads, restricts writes.
     */
    match /aboutMe/{aboutMeId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows authenticated users to create messages, but restricts listing to the owner.
     * @path /messages/{messageId}
     * @allow (create): Any authenticated user can create a message.
     * @allow (get): Anyone can read messages.
     * @allow (list): Nobody can list messages.
     * @allow (update, delete): No one can modify or delete messages.
     * @deny (update, delete): Attempts by any user to modify or delete messages will be rejected.
     * @principle Allows public reads, restricts writes.
     */
    match /messages/{messageId} {
      allow get: if true;
      allow create: if isSignedIn();
      allow list: if false;
      allow update, delete: if false;
    }

    /**
     * @description Allows authenticated users to create messages under their user ID, but restricts listing to the owner.
     * @path /users/{userId}/messages/{messageId}
     * @allow (create): Any authenticated user can create a message under their user ID.
     * @allow (get): Anyone can read messages.
     * @allow (list): The owner can list their messages.
     * @allow (update, delete): No one can modify or delete messages.
     * @deny (update, delete): Attempts by any user to modify or delete messages will be rejected.
     */
    match /users/{userId}/messages/{messageId} {
        allow get: if true;
        allow create: if isSignedIn() && isOwner(userId);
        allow list: if isOwner(userId);
        allow update, delete: if false;
    }
  }

  function isSignedIn() {
    return request.auth != null;
  }

  function isOwner(userId) {
    return request.auth.uid == userId;
  }
}