/**
 * @file Firestore Security Rules for Bhavesh's Portfolio
 *
 * @core_philosophy This ruleset enforces a public-read, owner-write model for portfolio data (projects, skills, aboutMe, contactInfo).
 *   Contact form messages are writeable by any signed-in or anonymous user, but are only readable by the admin.
 *
 * @data_structure The database consists of top-level collections for each data entity:
 *   /projects/{projectId}
 *   /skills/{skillId}
 *   /contactInfo/{contactInfoId}
 *   /aboutMe/{aboutMeId}
 *   /messages/{messageId}
 *
 * @key_security_decisions
 *   - All collections are publicly readable to allow display on the website.
 *   - Only the admin can modify projects, skills, aboutMe, and contactInfo.  This is enforced by denying all write operations for non-authenticated users.
 *   - Any signed-in or anonymous user can create new messages. Only the admin can read messages.
 *   - No user listing is allowed.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Secure the /projects collection. Anyone can read the list of projects. Only the admin can add, modify, or delete projects.
     * @path /projects/{projectId}
     * @allow (get, list): Anyone can read project data to display the portfolio.
     * @allow (create, update, delete): Only the admin can modify project data.
     * @deny (create): A non-admin user attempts to create a project.
     * @principle Public read, admin-only write.
     */
    match /projects/{projectId} {
      allow get, list: if true;
      allow create, update, delete: if isSignedIn();
    }

    /**
     * @description Secure the /skills collection. Anyone can read the list of skills. Only the admin can add, modify, or delete skills.
     * @path /skills/{skillId}
     * @allow (get, list): Anyone can read skill data to display the portfolio.
     * @allow (create, update, delete): Only the admin can modify skill data.
     * @deny (create): A non-admin user attempts to create a skill.
     * @principle Public read, admin-only write.
     */
    match /skills/{skillId} {
      allow get, list: if true;
      allow create, update, delete: if isSignedIn();
    }

    /**
     * @description Secure the /contactInfo collection. Anyone can read the contact info. Only the admin can add, modify, or delete contact info.
     * @path /contactInfo/{contactInfoId}
     * @allow (get, list): Anyone can read contact info to display it.
     * @allow (create, update, delete): Only the admin can modify contact info.
     * @deny (create): A non-admin user attempts to create contact info.
     * @principle Public read, admin-only write.
     */
    match /contactInfo/{contactInfoId} {
      allow get, list: if true;
      allow create, update, delete: if isSignedIn();
    }

    /**
     * @description Secure the /aboutMe collection. Anyone can read the about me section. Only the admin can add, modify, or delete it.
     * @path /aboutMe/{aboutMeId}
     * @allow (get, list): Anyone can read the About Me section.
     * @allow (create, update, delete): Only the admin can modify the About Me section.
     * @deny (create): A non-admin user attempts to create the About Me section.
     * @principle Public read, admin-only write.
     */
    match /aboutMe/{aboutMeId} {
      allow get, list: if true;
      allow create, update, delete: if isSignedIn();
    }

    /**
     * @description Secure the /messages collection. Anyone can create messages. Only the admin can read or delete them.
     * @path /messages/{messageId}
     * @allow (create): Any signed-in or anonymous user can send a message.
     * @allow (get, list, delete): Only the admin can read/delete messages.
     * @deny (get, list): A non-admin user attempts to read/list messages.
     * @principle Public write, admin-only read/delete.
     */
    match /messages/{messageId} {
      allow create: if true;
      allow get, list, delete: if isSignedIn();
    }
  }

  function isSignedIn() {
    return request.auth != null;
  }
}